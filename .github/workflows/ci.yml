name: Build & Deploy Backend
on:
  push:
    branches: [main]
permissions:
  contents: read
  packages: write
jobs:
  build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: docker/setup-buildx-action@v3
      - uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ secrets.REPO_OWNER }}
          password: ${{ secrets.GHCR_TOKEN }}
      - uses: docker/build-push-action@v5
        with:
          context: ./backend
          file: ./backend/Dockerfile
          push: true
          tags: ${{ secrets.DOCKER_IMAGE }}

  deploy:
    name: Deploy to OCI
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: SSH and Deploy
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.DEPLOY_HOST }}
          username: ${{ secrets.DEPLOY_USER }}
          key: ${{ secrets.DEPLOY_KEY }}
          script: |
            # This script runs on your OCI server via SSH.
            # 'set -e' ensures the script will exit immediately if a command fails.
            set -e

            echo "--- STARTING DEPLOYMENT ---"

            # 1. Log in to GitHub Container Registry (GHCR) to pull the private image.
            echo "--> Logging in to GHCR..."
            echo ${{ secrets.GHCR_TOKEN }} | sudo docker login ghcr.io -u ${{ secrets.REPO_OWNER }} --password-stdin

            # 2. Stop the currently running container if it exists.
            # The '|| true' part prevents an error if the container isn't running on the first deploy.
            echo "--> Stopping existing container..."
            sudo docker stop backend-app || true

            # 3. Remove the stopped container. This is necessary to reuse the name.
            echo "--> Removing existing container..."
            sudo docker rm backend-app || true

            # 4. Pull the new version of the image from GHCR.
            echo "--> Pulling new Docker image..."
            sudo docker pull ${{ secrets.DOCKER_IMAGE }}

            # 5. Run a new container from the updated image.
            #    -d: Detached mode (runs in the background)
            #    --restart=always: Restarts the container if the server reboots
            #    --name: Gives the container a predictable name
            #    -p: Maps the host's port 8080 to the container's port 8080
            echo "--> Starting new container..."
            sudo docker run -d --restart=always --name backend-app -p 8080:8080 ${{ secrets.DOCKER_IMAGE }}

            # 6. (Best Practice) Clean up old, dangling Docker images to save disk space.
            echo "--> Pruning old images..."
            sudo docker image prune -f

            echo "--- DEPLOYMENT COMPLETE ---"
