name: Build & Deploy Backend
on:
  push:
    branches: [main]

permissions:
  contents: read
  packages: write

concurrency:
  group: backend-deploy
  cancel-in-progress: true

jobs:
  build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    continue-on-error: true
    steps:
      - uses: actions/checkout@v4
      - uses: docker/setup-buildx-action@v3
      - uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${github.actor}
          password: ${secrets.GITHUB_TOKEN}
      - uses: docker/build-push-action@v5
        with:
          context: ./backend
          file: ./backend/Dockerfile
          push: true
          tags: ${secrets.DOCKER_IMAGE}

  build_retry:
    name: Build Docker Image (retry)
    needs: [build]
    if: always() && needs.build.result == 'failure'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: docker/setup-buildx-action@v3
      - uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${github.actor}
          password: ${secrets.GITHUB_TOKEN}
      - name: Backoff
        run: sleep 30
      - uses: docker/build-push-action@v5
        with:
          context: ./backend
          file: ./backend/Dockerfile
          push: true
          tags: ${secrets.DOCKER_IMAGE}

  deploy:
    name: Deploy to OCI
    needs: [build, build_retry]
    if: needs.build.result == 'success' || needs.build_retry.result == 'success'
    runs-on: ubuntu-latest
    continue-on-error: true
    steps:
      - name: SSH and Deploy
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${secrets.DEPLOY_HOST}
          username: ${secrets.DEPLOY_USER}
          key: ${secrets.DEPLOY_KEY}
          port: ${secrets.DEPLOY_PORT}
          script_stop: true
          script: |
            set -euo pipefail
            echo "--- STARTING DEPLOYMENT ---"

            echo "--> Logging in to GHCR..."
            echo "${secrets.GHCR_TOKEN}" | docker login ghcr.io -u "${secrets.REPO_OWNER}" --password-stdin

            echo "--> Stopping existing container..."
            docker stop backend-app || true
            docker rm backend-app || true

            echo "--> Pulling new Docker image..."
            docker pull "${secrets.DOCKER_IMAGE}"

            echo "--> Starting new container..."
            docker run -d --restart=always --name backend-app -p 8080:8080 "${secrets.DOCKER_IMAGE}"

            echo "--> Pruning old images..."
            docker image prune -f

            echo "--- DEPLOYMENT COMPLETE ---"

  deploy_retry_1:
    name: Deploy Retry 1
    needs: [deploy]
    if: always() && needs.deploy.result == 'failure'
    runs-on: ubuntu-latest
    continue-on-error: true
    steps:
      - name: Wait 5 minutes
        run: sleep 300
      - name: SSH and Deploy (retry 1)
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${secrets.DEPLOY_HOST}
          username: ${secrets.DEPLOY_USER}
          key: ${secrets.DEPLOY_KEY}
          port: ${secrets.DEPLOY_PORT}
          script_stop: true
          script: |
            set -euo pipefail
            echo "--- DEPLOYMENT RETRY 1 ---"
            echo "${secrets.GHCR_TOKEN}" | docker login ghcr.io -u "${secrets.REPO_OWNER}" --password-stdin
            docker stop backend-app || true
            docker rm backend-app || true
            docker pull "${secrets.DOCKER_IMAGE}"
            docker run -d --restart=always --name backend-app -p 8080:8080 "${secrets.DOCKER_IMAGE}"
            docker image prune -f
            echo "--- RETRY 1 COMPLETE ---"

  deploy_retry_2:
    name: Deploy Retry 2
    needs: [deploy_retry_1]
    if: always() && needs.deploy_retry_1.result == 'failure'
    runs-on: ubuntu-latest
    continue-on-error: true
    steps:
      - name: Wait 5 minutes
        run: sleep 300
      - name: SSH and Deploy (retry 2)
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${secrets.DEPLOY_HOST}
          username: ${secrets.DEPLOY_USER}
          key: ${secrets.DEPLOY_KEY}
          port: ${secrets.DEPLOY_PORT}
          script_stop: true
          script: |
            set -euo pipefail
            echo "--- DEPLOYMENT RETRY 2 ---"
            echo "${secrets.GHCR_TOKEN}" | docker login ghcr.io -u "${secrets.REPO_OWNER}" --password-stdin
            docker stop backend-app || true
            docker rm backend-app || true
            docker pull "${secrets.DOCKER_IMAGE}"
            docker run -d --restart=always --name backend-app -p 8080:8080 "${secrets.DOCKER_IMAGE}"
            docker image prune -f
            echo "--- RETRY 2 COMPLETE ---"

  deploy_retry_3:
    name: Deploy Retry 3
    needs: [deploy_retry_2]
    if: always() && needs.deploy_retry_2.result == 'failure'
    runs-on: ubuntu-latest
    continue-on-error: true
    steps:
      - name: Wait 5 minutes
        run: sleep 300
      - name: SSH and Deploy (retry 3)
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${secrets.DEPLOY_HOST}
          username: ${secrets.DEPLOY_USER}
          key: ${secrets.DEPLOY_KEY}
          port: ${secrets.DEPLOY_PORT}
          script_stop: true
          script: |
            set -euo pipefail
            echo "--- DEPLOYMENT RETRY 3 ---"
            echo "${secrets.GHCR_TOKEN}" | docker login ghcr.io -u "${secrets.REPO_OWNER}" --password-stdin
            docker stop backend-app || true
            docker rm backend-app || true
            docker pull "${secrets.DOCKER_IMAGE}"
            docker run -d --restart=always --name backend-app -p 8080:8080 "${secrets.DOCKER_IMAGE}"
            docker image prune -f
            echo "--- RETRY 3 COMPLETE ---"

  finalize:
    name: Finalize
    needs: [build, build_retry, deploy, deploy_retry_1, deploy_retry_2, deploy_retry_3]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Set overall status
        run: |
          # Check build success
          if [[ "${needs.build.result}" != "success" && "${needs.build_retry.result}" != "success" ]]; then
            echo "Build failed after retry"
            exit 1
          fi
          
          # Check deploy success (any of the attempts)
          if [[ "${needs.deploy.result}" == "success" || "${needs.deploy_retry_1.result}" == "success" || "${needs.deploy_retry_2.result}" == "success" || "${needs.deploy_retry_3.result}" == "success" ]]; then
            echo "Deployment successful!"
            exit 0
          else
            echo "All deployment attempts failed"
            exit 1
          fi
