name: Build & Deploy Backend

on:
  push:
    branches: [main]
  workflow_dispatch:

permissions:
  contents: read
  packages: write

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build:
    name: Build & Push Docker Image
    runs-on: ubuntu-latest
    
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_TOKEN }}
      
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
      
      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          file: ./backend/Dockerfile
          platforms: linux/amd64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    name: Deploy to Server
    needs: build
    runs-on: [self-hosted, prod]
    
    steps:
      - name: Deploy new container
        run: |
          set -e
          echo "🚀 Starting deployment on self-hosted runner..."
          # Login to GHCR
          echo "🔐 Logging in to GitHub Container Registry..."
          echo "${{ secrets.GHCR_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
          # Stop and remove existing API container
          echo "🛑 Stopping existing API container..."
          docker stop api-container || echo "Container not running"
          docker rm api-container || echo "Container not found"
          # Pull latest image
          echo "📥 Pulling latest API image..."
          docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          # Ensure network exists
          echo "🌐 Creating network if needed..."
          docker network create app-network || echo "Network already exists"
          # Deploy new API container
          echo "🚀 Deploying new API container..."
          docker run -d \
            --name api-container \
            --restart unless-stopped \
            --network app-network \
            -p 443:443 \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          # Verify deployment
          echo "✅ Verifying deployment..."
          sleep 5
          
          if docker ps | grep -q api-container; then
            echo "✅ API container is running successfully"
            docker ps | grep api-container
          else
            echo "❌ API container failed to start"
            docker logs api-container || true
            exit 1
          fi
          # Test health endpoint
          echo "🏥 Testing health endpoint..."
          if curl -f -s http://localhost:443/health > /dev/null 2>&1; then
            echo "✅ Health check passed"
          else
            echo "⚠️ Health check failed, but container is running"
          fi
          # Clean up old images
          echo "🧹 Cleaning up old images..."
          docker image prune -f
          echo "🎉 Deployment completed successfully!"
          echo "📊 Container status:"
          docker ps --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}"
  notify:
    name: Deployment Notification
    needs: [build, deploy]
    if: always()
    runs-on: ubuntu-latest
    
    steps:
      - name: Deployment Status
        run: |
          if [ "${{ needs.deploy.result }}" == "success" ]; then
            echo "✅ Deployment successful!"
            echo "🌐 API is live at: https://api.seshon.tech"
            echo "🐳 Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest"
          elif [ "${{ needs.deploy.result }}" == "failure" ]; then
            echo "❌ Deployment failed!"
            echo "Check the deployment logs for details."
            exit 1
          elif [ "${{ needs.deploy.result }}" == "skipped" ]; then
            echo "⏭️ Deployment skipped"
          fi