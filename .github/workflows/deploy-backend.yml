name: Build and Deploy to VPS

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      force_deploy:
        description: 'Force deployment even if no changes'
        required: false
        default: 'false'
        type: boolean

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      image-tag: ${{ steps.meta.outputs.tags }}
      image-pushed: ${{ steps.push-check.outputs.pushed }}
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: Build and push Docker image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Check if image was pushed
      id: push-check
      run: |
        if [ "${{ github.event_name }}" != "pull_request" ]; then
          echo "pushed=true" >> $GITHUB_OUTPUT
        else
          echo "pushed=false" >> $GITHUB_OUTPUT
        fi

  deploy:
    needs: build-and-push
    if: needs.build-and-push.outputs.image-pushed == 'true' || github.event.inputs.force_deploy == 'true'
    runs-on: [self-hosted, terraform, vultr, docker]
    
    steps:
    - name: Clean workspace
      run: |
        # Clean up any previous workflow artifacts
        rm -rf ${{ github.workspace }}/*
        docker system prune -f || true
    
    - name: Verify Docker access
      run: |
        docker --version
        docker ps
    
    - name: Login to GitHub Container Registry
      run: |
        echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
    
    - name: Pull latest image
      run: |
        echo "🔄 Pulling latest image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest"
        docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
    
    - name: Stop and remove old container
      run: |
        echo "🛑 Stopping existing container..."
        docker stop api-container || echo "Container not running"
        docker rm api-container || echo "Container not found"
    
    - name: Deploy new container
      run: |
        echo "🚀 Deploying new container..."
        docker run -d \
          --name api-container \
          --restart unless-stopped \
          --network app-network \
          -p 443:443 \
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
    
    - name: Verify deployment
      run: |
        echo "✅ Verifying deployment..."
        sleep 10
        
        # Check if container is running
        if docker ps | grep -q api-container; then
          echo "✅ Container is running"
          docker ps | grep api-container
        else
          echo "❌ Container failed to start"
          docker logs api-container || true
          exit 1
        fi
        
        # Test health endpoint (adjust URL as needed)
        if curl -f -s http://localhost:443/health > /dev/null 2>&1; then
          echo "✅ Health check passed"
        else
          echo "⚠️ Health check failed, but container is running"
        fi
    
    - name: Clean up old images
      run: |
        echo "🧹 Cleaning up old images..."
        docker image prune -f
    
    - name: Deployment summary
      run: |
        echo "🎉 Deployment completed successfully!"
        echo "📦 Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest"
        echo "🔗 Available at: https://api.seshon.tech"
        echo "📊 Container status:"
        docker ps | grep api-container

  notify:
    needs: [build-and-push, deploy]
    if: always()
    runs-on: ubuntu-latest
    
    steps:
    - name: Deployment notification
      run: |
        if [ "${{ needs.deploy.result }}" == "success" ]; then
          echo "✅ Deployment successful!"
          echo "🌐 Application is live at: https://api.seshon.tech"
        elif [ "${{ needs.deploy.result }}" == "failure" ]; then
          echo "❌ Deployment failed!"
          echo "Check the deployment logs for details."
        elif [ "${{ needs.deploy.result }}" == "skipped" ]; then
          echo "⏭️ Deployment skipped (PR or no changes)"
        fi
